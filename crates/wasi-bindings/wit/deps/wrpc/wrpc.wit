package wasi:wrpc@0.1.0-draft;

interface types {


    type request = list<u8>;
    type response = list<u8>;

    /// Configuration includes a required list of channels the guest is subscribing to, and an optional list of extensions key-value pairs 
    /// (e.g., partitions/offsets to read from in Kafka/EventHubs, QoS etc.).
    record server-configuration {
        name: string,
        // extensions: option<list<tuple<string, string>>>
    }
}



interface client {
    use types.{ request, response};

    resource error {
        trace: func() -> string;    
    }

    call: func(server: string, request: request) -> result<response, error>;
}

interface server {
    use types.{request, response, server-configuration};

        /// Errors that can be returned by the server.
    variant error {
        /// The request was invalid.
        invalid-request,

        /// Some implementation-specific error occurred.
        other(string)
    }

    configure: func() -> result<server-configuration, error>;

    handle: func(request: request) -> result<response, error>;
}

world imports {
	import client;
}

world wrpc {
	include imports;
	export server;
}