interface signature-types {
    /// Error type for signature operations. The implementation must be provided
    /// by the host.
    resource error {
        trace: static func() -> string;    
    }

    /// Supported signing suites. See <https://www.w3.org/TR/vc-jws-2020/>.
    record signing-suite {
        /// Algorithm returns the algorithm used by the signer.
        signature-algorithm: signature-algorithm,

        /// The verification method the verifier should use to verify the signer's
        /// signature. This is typically a DID URL + # + verification key ID.
        verification-method: string,
    }
    
    /// Supported [IANA_JOSE] signature algorithms.
    /// 
    /// | kty | crvOrSize | signature | keyAgreement | encryption
    /// | OKP | Ed25519   | EdDSA     |              | ECDH-ES+A256KW
    /// | EC | secp256k1  | ES256K    | ECDH         | ECDH-ES+A256KW
    /// 
    /// N.B. 
    /// 1. Message Canonicalization: All messages are canonicalized using 
    ///   the JSON Canonicalization Scheme (JCS) before being signed.
    ///    See https://www.rfc-editor.org/rfc/rfc8785
    /// 
    /// 2. Message Digest: The message digest is computed using SHA-256.
    /// 
    /// [IANA_JOSE]: https://www.iana.org/assignments/jose/jose.xhtml
    variant signature-algorithm {
        /// `secp256k1` curve for signing suite  EcdsaSecp256k1Signature2019. 
        es256k,

        /// `ed22519` curve for signing suite JsonWebSignature2020.
        eddsa,
    }

}