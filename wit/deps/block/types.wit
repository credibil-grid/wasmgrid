interface types {
    /// The set of errors which may be raised by functions in this package.
    variant error {
        /// The request failed authorization from the underlying key store.
        access-denied,
        /// The host does not recognize the key requested.
        no-such-key,
        /// A request to add a block fails because the given key identifier is
        /// already in use.
        key-already-exists,
        /// An error occurred in the underlying block store when attempting the
        /// requested operation.
        store-error(string),
        /// A service implementation error occurred.
        other(string),
    }

    /// A location in a block store where a value is stored.
    record location {
        /// The owner of the block.
        owner: string,

        /// The partition or catalog to which the block belongs.
        partition: string,

        /// Name of the stored item.
        key: string,
    }

    type datetime = u64; // Unix timestamp in seconds

    /// Implementation-dependent metadata associated with a stored block.
    record metadata {
        /// The creation time of the key pair.
        created: func() -> option<datetime>,

        /// The last updated time of the key pair.
        updated: func() -> option<datetime>,

        /// The first moment the key can be used.
        not-before: func() -> option<datetime>,

        /// The last moment the key can be used.
        expires: func() -> option<datetime>,

        /// Flag indicating if the key pair is enabled. (The meaning of
        /// "enabled" is implementation-specific).
        enabled: func() -> option<bool>,

        /// Hint for deserialization of the block data.
        content-type: func() -> option<string>,
    };

    /// A block identifier is the identifying attributes of a stored item and
    /// its metadata. Used to get information about stored items without
    /// retrieving the value at that location.
    resource identifier {
        /// The location of the stored item.
        location: location,

        /// The version of the stored item. This is implementation specific, but
        /// it is intended that the underlying block store will generate an
        /// unpredictable version identifier that is unique for a given
        /// location.
        version: string,

        /// The metadata associated with the stored item.
        metadata: option<metadata>,
    }

    /// A representation of a stored block.
    resource block {
        /// Location of the stored block.
        location: func() -> location;

        /// The version of the store block.
        version: func() -> string;
        
        /// The stored value expressed as bytes.
        value: func() -> result<list<u8>, error>;

        /// Implementation-dependent metadata associated with the block.
        metadata: func() -> option<metadata>;
    }
}
