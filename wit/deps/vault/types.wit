interface types {
    /// Error type for vault operations. The implementation must be provided
    /// by the host.
    resource error {
        trace: func() -> string;    
    }

    /// Supported signing suites. See <https://www.w3.org/TR/vc-jws-2020/>.
    record verification-method {
        /// Refers to the DID URL which identifies the public key in the DID Document
        /// to be used to verify the vault. It MUST NOT be present if `jwk` is 
        /// set. This is typically a DID URL + # + verification key ID.
        /// 
        /// For example, did:example:123#_Qq0UL2Fq651Q0Fjd6TvnYE-faHiOpRlPVQcY_-tA4A.
        key-id: string,

        /// Algorithm returns the algorithm used by the signer.
        algorithm: algorithm,

        /// The JWK used to for verification. MUST NOT be set if `public-key-multibase`
        /// is set.
        jwk: option<jwk>,
    }
    
    /// Supported [IANA_JOSE] vault algorithms.
    /// 
    /// | kty | crvOrSize | vault | keyAgreement | encryption
    /// | OKP | Ed25519   | EdDSA     |              | ECDH-ES+A256KW
    /// | EC | secp256k1  | ES256K    | ECDH         | ECDH-ES+A256KW
    /// 
    /// N.B. 
    /// 1. All messages are canonicalized using the JSON Canonicalization Scheme (JCS)
    ///    before being signed. See https://www.rfc-editor.org/rfc/rfc8785
    /// 
    /// 2. Message Digest: The message digest is computed using SHA-256.
    /// 
    /// [IANA_JOSE]: https://www.iana.org/assignments/jose/jose.xhtml
    // variant algorithm {
    variant algorithm {
        /// ECDSA using secp256k1 curve and SHA-256. 
        es256k,

        /// EdDSA vault algorithms using `ed22519` curve and SHA-256.
        eddsa,
    }

    /// JSON Web Key format public key.
    /// See <https://www.rfc-editor.org/rfc/rfc7517.html>.
    record jwk {
        kty: string,
        crv: string,
        x: string,
        y: option<string>,
        // use: option<string>,
    }
}

    // ***********************
    // The key specification underpinning design of this wit is Securing Verifiable 
    // Credentials using JOSE and COSE (<https://w3c.github.io/vc-jose-cose>).
    // ***********************

    //  /// Supported verification method types as registered in the 
    //  /// [DID Specification Registries](https://www.w3.org/TR/did-spec-registries/).
    // variant method-type {
    //     /// `EcdsaSecp256k1VerificationKey2019`
    //     ecdsa-secp256k1-verification-key2019,

    //     /// `Ed25519VerificationKey2020`
    //     /// See https://www.w3.org/community/reports/credentials/CG-FINAL-di-eddsa-2020-20220724
    //     ed25519-verification-key2020,
    // }

    // /// See https://w3c.github.io/vc-jose-cose/#controller-documents
    // record verification-method {
    //     /// A [DID URL](https://www.w3.org/TR/did-core/#did-url-syntax).
    //     /// 
    //     /// For example, #key-0.
    //     id: string,

    //     /// References exactly one verification method type. In order to maximize global
    //     /// interoperability, the method type SHOULD be registered in the 
    //     /// [DID Specification Registries](https://www.w3.org/TR/did-spec-registries/).
    //     type: method-type,

    //     /// The DID of the DID Document containing the verification method.
    //     /// MUST conform to [DID Syntax](https://www.w3.org/TR/did-core/#did-syntax).
    //     ///
    //     /// For example, did:example:123.
    //     controller: string,

    //     /// The JWK used to for verification. MUST NOT be set if `public-key-multibase`
    //     /// is set.
    //     public-key-jwk: option<jwk>,

    //     /// A Multibase-encoded public key. MUST NOT be set if `public-key-jwk` is set.
    //     /// 
    //     /// See <https://www.w3.org/TR/vc-data-integrity/#multibase-0>.
    //     public-key-multibase: option<string>,
    // }