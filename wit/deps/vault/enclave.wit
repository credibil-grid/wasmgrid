/// # Key Manager
/// 
/// Store manages the storage lifecycle of cryptographic keys
interface enclave {
    use types.{error, jwk};

    variant key-op {
        /// Used to specify the signing key for the DID.
        signing,

        // Used to specify the key used in DID update operations,
        // including signing key rollover.
        update,

        // Used to specify the key used in DID recovery operations.
        recovery,
    }

    /// Returns the active (current) version of the specified key. If the key is not 
    /// found, it will be created and activated.
    active-key: func(op: key-op) -> result<jwk, error>;

    /// Returns the next version of the specified key.
    next-key: func(op: key-op) -> result<jwk, error>;

    /// Signs the provided data using the signing key, returning the signature.
    sign: func(data: list<u8>) -> result<list<u8>, error>;
}