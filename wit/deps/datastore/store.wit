/// Store provides an interface for secure storage of bytes. While not confined
/// to this use case, the intent is for it to be used for the storage of
/// cryptographic private keys.
interface store {
    use types.{block, error, identifier, location, metadata};

    /// Create a new block in the store.
    /// 
    /// The block's identifier is returned which will include the
    /// system-assigned version.
    /// 
    /// If a block already exists at that location, an `already-exists`
    /// error will be returned.
    put: func(location: location, value: list<u8>, metadata: option<metadata>) -> result<identifier, error>;

    /// Create a new version of an existing block in the store, optionally
    /// deleting any previous versions of the block. This will not overwrite
    /// the existing block but instead create a new version.
    /// 
    /// The block's identifier is returned which will include the new
    /// system-assigned version.
    /// 
    /// If a block does not exist at that location, a `not-found` error will
    /// be returned.
    new-version: func(location: location, value: list<u8>, metadata: option<metadata>, delete-previous: bool) -> result<identifier, error>;

    /// Update the metadata of an existing block in the store.
    /// 
    /// If version is not specified, the newest (most recent created date-time)
    /// version of the block will be updated.
    /// 
    /// If a block does not exist at that location, a `not-found` error will
    /// be returned.
    update: func(location: location, version: option<string>, metadata: metadata) -> result<identifier, error>;

    /// Retrieve a block from the store.
    /// 
    /// If the version is not specified, the latest version of the block will
    /// be returned.
    /// 
    /// If a block does not exist at that location, a `not-found` error will be
    /// returned.
    get: func(location: location, version: option<string>) -> result<block, error>;

    /// Remove a block from the store.
    ///
    /// This will remove all versions of the block at the specified location.
    /// 
    /// If the block does not exist at that location, a `not-found` error will
    /// be returned.
    delete: func(location: location) -> result<_, error>;

    /// Get all the versions of a block at the specified location.
    /// 
    /// If the block does not exist at that location, a `not-found` error will
    /// be returned.
    versions: func(location: location) -> result<list<identifier>, error>;

    
    /// The response to a `get-list` operation.
    record list-response {
        /// The list of blocks returned by the query.
        blocks: list<identifier>,
        /// The continuation token to use to fetch the next page of blocks. If
        /// this is `null`, then there are no more blocks to fetch.
        cursor: option<string>
    }

    /// Get all of the identifiers of blocks in the store for the specified
    /// owner and optional partition.
    /// 
    /// NOTE: For most implementations, this could be a very expensive call.
    get-list: func(owner: string, partition: option<string>, cursor: option<string>) -> result<list-response, error>;
}
