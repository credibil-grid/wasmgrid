/// Keystore provides an interface for secure storage and use of cryptographic
/// keys.
interface keystore {
    use types.{curve, error, key-metadata, key-pair};

    /// The set of supported cryptographic curves.
    supported-curves: func() -> list<curve>;

    /// Add a key to the keystore by generating a new key pair using the
    /// specified curve.
    /// 
    /// Will return an error if a key with the same name already exists.
    create: func(name: string, algorithm: curve) -> result<key-pair, error>;

    /// Replace an existing key pair with a new one.
    /// 
    /// Caution: This will delete the existing key pair and create a new one
    /// with the same name. Use `rotate` if you want to keep the existing key
    /// and generate a new version.
    ///
    /// Will return an error if the key pair does not exist.
    replace: func(name: string, algorithm: curve) -> result<key-pair, error>;

    /// Add a new version to an existing key pair.
    /// 
    /// Will return an error if the key pair does not exist.
    rotate: func(name: string) -> result<key-pair, error>;

    /// Returns all of the metadata for active keys in the keystore.
    list: func() -> result<list<key-metadata>, error>;

    /// Get a key pair by name. If the version is not specified, the latest
    /// version of the key pair will be returned.
    /// 
    /// If no key pair with the specified name/version exists an error is
    /// returned.
    get: func(name: string, version: option<string>) -> result<key-pair, error>;

    /// Delete a key pair by name. Will delete all versions of the key.
    delete: func(name: string) -> result<_, error>;

    /// Get active key pair versions for the specified key name.
    /// 
    /// If no key pair with the specified name exists an error is returned.
    versions: func(name: string) -> result<list<key-metadata>, error>;
}
