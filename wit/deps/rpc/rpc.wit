package wasi:rpc@0.1.0-draft;

interface types {
    /// A serialized request to a RPC server.
    type request = list<u8>;

    /// A serialized response from a RPC server.
    type response = list<u8>;
}

/// A psuedo-RPC Client interface that can be used to make requests to a wRPC server.
/// 
interface client {
    use types.{request, response};

    /// Error type that can be returned by implementing runtime. The runtime should provide a 
    /// trace of the error.
    resource error {
        trace: func() -> string;    
    }

    /// Call the specified endpoint.
    /// 
    /// `endpoint` identifies the server identifier + method to call. 
    /// 
    /// For example, 
    /// 
    /// ```rust
    /// let request = serde_json::to_vec(&ClaimsRequest {
    ///     claims: ...,
    /// })?;
    /// 
    /// let resp = wrpc::client::call("holder.v1.HolderService/GetClaims", request)?;
    /// ...
    /// ```
    ///
    /// `request` is a serialized server-specific request object.
    call: func(endpoint: string, request: request) -> result<response, error>;
}

/// A psuedo-RPC Server interface that can be used to serve wRPC clients (above).
interface server {
    use types.{request, response};

    /// Errors that can be returned by the server.
    variant error {
        /// The endpoint specified is invalid.
        unknown-endpoint,

        /// The request was invalid.
        invalid-request,

        /// Some implementation-specific error occurred.
        other(string)
    }

    /// Configuration includes the server's unique identifier.
    record server-configuration {
        identifier: string,
        // endpoints: list<string>,
    }

    /// Configure is called by the runtime to get the server's runtime configuration.
    /// At present, this consists of the server's `identifier` as used by the Client 
    /// when calling a server.
    configure: func() -> result<server-configuration, error>;

    /// Handle a request from a client.
    handle: func(endpoint: string, request: request) -> result<response, error>;
}

world imports {
    import types;
	import client;
}

world rpc {
	include imports;
	export server;
}