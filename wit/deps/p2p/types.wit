/// Types used by a peer-to-peer node.
interface types {
    /// The set of errors that may be raised by functions in this package.
    variant error {
        /// An error occurred while trying to read an entry stream.
        read-error(string),
        /// An error occurred while trying to write an entry stream.
        write-error(string),
        /// No container with the specified identifier exists.
        no-such-container,
        /// No entry with the specified key exists in the container.
        no-such-entry,
        /// An unspecified error occurred.
        other(string),
    }

    /// Container identifier.
    type container-id = string;

    /// Public key of a container owner. Containers can have more than one owner, where individual
    /// owners may have read/write/both access.
    /// 
    /// 1. Iroh calls this a short author ID that can be resolved to an author public key.
    type owner = string;

    /// Token that gives access to a container.
    /// 
    /// 1. Iroh calls this a ticket.
    type token = string;

    /// Permissions that holder of a container token can have.
    variant permission {
        /// Holder can read the container.
        read,

        /// Holder can write to the container.
        write,

        /// Holder can read and write to the container.
        read-write,
    }

    /// Information about an entry in a container.
    record entry-metadata {
        /// Name of the entry.
        name: string,
        /// Name of the container the entry is in.
        container: string,
        /// Size of the entry in bytes.
        size: u64,
        /// Time the entry was created (seconds since Unix epoch).
        created-at: u64,
    }

    /// Stream of bytes to store in an entry or read from an entry.
    resource entry {
        /// Returns the entry identifier within the container.
        key: func() -> result<string, error>;

        /// Perform a read from the stream.
        read: func(
            /// Maximum number of bytes to read.
            len: u64,
        ) -> result<list<u8>, error>;

        /// Check the capacity left in the stream.
        check-write: func() -> result<u64, error>;

        /// Perform a write to the stream.
        write: func(
            /// Bytes to write.
            data: list<u8>,
        ) -> result<_, error>;
    }
}
