/// Operations on a container of entries that make up a blob.
interface container {
    use types.{container-id, error, author, token, entry-metadata, permission};

    /// Create a new authoer on the underlying node and receive an ID to use for document writing.
    create-author: func() -> result<author, error>;

    /// Create a new container where the container handle is owned by the owner.
    create-container: func() -> result<container, error>;

    /// Retrieve an existing container using a token (which is imbued with read/write permissions).
    get-container: func(token: token) -> result<container, error>;

    /// Delete a container and all objects within it
    delete-container: func(container: container) -> result<_, error>;

    /// A container is a collection of entries that make up a blob.
    /// 
    /// 1. Iroh calls this a document.
    resource container {
        /// Return the container identifier.
        id: func() -> result<container-id, error>;

        /// Write an entry to the container.
        write-entry: func(
            /// Key of the entry to write to.
            key: string,
            /// ID of the author making the entry.
            author: author,
            /// Data to be used as the entry.
            data: list<u8>) -> result<_, error>;

        /// List entry keys in the container.
        list-entries: func() -> result<list<string>, error>;

        /// Get entry metadata for an exact key match. Returns an error if the entry does not exist.
        get-entry-metadata: func(key: string) -> result<entry-metadata, error>;

        /// Read an entry from the container from byte positions `start` up to `len` bytes.
        read-entry: func(key: string, start: u64, len: u64) -> result<list<u8>, error>;

        /// Remove an entry from the container.
        delete-entry: func(key: string) -> result<_, error>;

        /// Remove all entries from the container.
        clear-entries: func() -> result<_, error>;

        /// Get a token that gives access to the container.
        get-token: func(permission: permission) -> result<token, error>;
    }
}
